// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project/internal/model"
)

func newLatestDeviceAlarm(db *gorm.DB, opts ...gen.DOOption) latestDeviceAlarm {
	_latestDeviceAlarm := latestDeviceAlarm{}

	_latestDeviceAlarm.latestDeviceAlarmDo.UseDB(db, opts...)
	_latestDeviceAlarm.latestDeviceAlarmDo.UseModel(&model.LatestDeviceAlarm{})

	tableName := _latestDeviceAlarm.latestDeviceAlarmDo.TableName()
	_latestDeviceAlarm.ALL = field.NewAsterisk(tableName)
	_latestDeviceAlarm.ID = field.NewString(tableName, "id")
	_latestDeviceAlarm.AlarmConfigID = field.NewString(tableName, "alarm_config_id")
	_latestDeviceAlarm.GroupID = field.NewString(tableName, "group_id")
	_latestDeviceAlarm.SceneAutomationID = field.NewString(tableName, "scene_automation_id")
	_latestDeviceAlarm.Name = field.NewString(tableName, "name")
	_latestDeviceAlarm.Description = field.NewString(tableName, "description")
	_latestDeviceAlarm.Content = field.NewString(tableName, "content")
	_latestDeviceAlarm.AlarmStatus = field.NewString(tableName, "alarm_status")
	_latestDeviceAlarm.TenantID = field.NewString(tableName, "tenant_id")
	_latestDeviceAlarm.Remark = field.NewString(tableName, "remark")
	_latestDeviceAlarm.CreateAt = field.NewTime(tableName, "create_at")
	_latestDeviceAlarm.DeviceID = field.NewString(tableName, "device_id")

	_latestDeviceAlarm.fillFieldMap()

	return _latestDeviceAlarm
}

type latestDeviceAlarm struct {
	latestDeviceAlarmDo

	ALL               field.Asterisk
	ID                field.String
	AlarmConfigID     field.String
	GroupID           field.String
	SceneAutomationID field.String
	Name              field.String
	Description       field.String
	Content           field.String
	AlarmStatus       field.String
	TenantID          field.String
	Remark            field.String
	CreateAt          field.Time
	DeviceID          field.String

	fieldMap map[string]field.Expr
}

func (l latestDeviceAlarm) Table(newTableName string) *latestDeviceAlarm {
	l.latestDeviceAlarmDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l latestDeviceAlarm) As(alias string) *latestDeviceAlarm {
	l.latestDeviceAlarmDo.DO = *(l.latestDeviceAlarmDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *latestDeviceAlarm) updateTableName(table string) *latestDeviceAlarm {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "id")
	l.AlarmConfigID = field.NewString(table, "alarm_config_id")
	l.GroupID = field.NewString(table, "group_id")
	l.SceneAutomationID = field.NewString(table, "scene_automation_id")
	l.Name = field.NewString(table, "name")
	l.Description = field.NewString(table, "description")
	l.Content = field.NewString(table, "content")
	l.AlarmStatus = field.NewString(table, "alarm_status")
	l.TenantID = field.NewString(table, "tenant_id")
	l.Remark = field.NewString(table, "remark")
	l.CreateAt = field.NewTime(table, "create_at")
	l.DeviceID = field.NewString(table, "device_id")

	l.fillFieldMap()

	return l
}

func (l *latestDeviceAlarm) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *latestDeviceAlarm) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 12)
	l.fieldMap["id"] = l.ID
	l.fieldMap["alarm_config_id"] = l.AlarmConfigID
	l.fieldMap["group_id"] = l.GroupID
	l.fieldMap["scene_automation_id"] = l.SceneAutomationID
	l.fieldMap["name"] = l.Name
	l.fieldMap["description"] = l.Description
	l.fieldMap["content"] = l.Content
	l.fieldMap["alarm_status"] = l.AlarmStatus
	l.fieldMap["tenant_id"] = l.TenantID
	l.fieldMap["remark"] = l.Remark
	l.fieldMap["create_at"] = l.CreateAt
	l.fieldMap["device_id"] = l.DeviceID
}

func (l latestDeviceAlarm) clone(db *gorm.DB) latestDeviceAlarm {
	l.latestDeviceAlarmDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l latestDeviceAlarm) replaceDB(db *gorm.DB) latestDeviceAlarm {
	l.latestDeviceAlarmDo.ReplaceDB(db)
	return l
}

type latestDeviceAlarmDo struct{ gen.DO }

type ILatestDeviceAlarmDo interface {
	gen.SubQuery
	Debug() ILatestDeviceAlarmDo
	WithContext(ctx context.Context) ILatestDeviceAlarmDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILatestDeviceAlarmDo
	WriteDB() ILatestDeviceAlarmDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILatestDeviceAlarmDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILatestDeviceAlarmDo
	Not(conds ...gen.Condition) ILatestDeviceAlarmDo
	Or(conds ...gen.Condition) ILatestDeviceAlarmDo
	Select(conds ...field.Expr) ILatestDeviceAlarmDo
	Where(conds ...gen.Condition) ILatestDeviceAlarmDo
	Order(conds ...field.Expr) ILatestDeviceAlarmDo
	Distinct(cols ...field.Expr) ILatestDeviceAlarmDo
	Omit(cols ...field.Expr) ILatestDeviceAlarmDo
	Join(table schema.Tabler, on ...field.Expr) ILatestDeviceAlarmDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILatestDeviceAlarmDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILatestDeviceAlarmDo
	Group(cols ...field.Expr) ILatestDeviceAlarmDo
	Having(conds ...gen.Condition) ILatestDeviceAlarmDo
	Limit(limit int) ILatestDeviceAlarmDo
	Offset(offset int) ILatestDeviceAlarmDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILatestDeviceAlarmDo
	Unscoped() ILatestDeviceAlarmDo
	Create(values ...*model.LatestDeviceAlarm) error
	CreateInBatches(values []*model.LatestDeviceAlarm, batchSize int) error
	Save(values ...*model.LatestDeviceAlarm) error
	First() (*model.LatestDeviceAlarm, error)
	Take() (*model.LatestDeviceAlarm, error)
	Last() (*model.LatestDeviceAlarm, error)
	Find() ([]*model.LatestDeviceAlarm, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LatestDeviceAlarm, err error)
	FindInBatches(result *[]*model.LatestDeviceAlarm, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.LatestDeviceAlarm) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILatestDeviceAlarmDo
	Assign(attrs ...field.AssignExpr) ILatestDeviceAlarmDo
	Joins(fields ...field.RelationField) ILatestDeviceAlarmDo
	Preload(fields ...field.RelationField) ILatestDeviceAlarmDo
	FirstOrInit() (*model.LatestDeviceAlarm, error)
	FirstOrCreate() (*model.LatestDeviceAlarm, error)
	FindByPage(offset int, limit int) (result []*model.LatestDeviceAlarm, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILatestDeviceAlarmDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l latestDeviceAlarmDo) Debug() ILatestDeviceAlarmDo {
	return l.withDO(l.DO.Debug())
}

func (l latestDeviceAlarmDo) WithContext(ctx context.Context) ILatestDeviceAlarmDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l latestDeviceAlarmDo) ReadDB() ILatestDeviceAlarmDo {
	return l.Clauses(dbresolver.Read)
}

func (l latestDeviceAlarmDo) WriteDB() ILatestDeviceAlarmDo {
	return l.Clauses(dbresolver.Write)
}

func (l latestDeviceAlarmDo) Session(config *gorm.Session) ILatestDeviceAlarmDo {
	return l.withDO(l.DO.Session(config))
}

func (l latestDeviceAlarmDo) Clauses(conds ...clause.Expression) ILatestDeviceAlarmDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l latestDeviceAlarmDo) Returning(value interface{}, columns ...string) ILatestDeviceAlarmDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l latestDeviceAlarmDo) Not(conds ...gen.Condition) ILatestDeviceAlarmDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l latestDeviceAlarmDo) Or(conds ...gen.Condition) ILatestDeviceAlarmDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l latestDeviceAlarmDo) Select(conds ...field.Expr) ILatestDeviceAlarmDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l latestDeviceAlarmDo) Where(conds ...gen.Condition) ILatestDeviceAlarmDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l latestDeviceAlarmDo) Order(conds ...field.Expr) ILatestDeviceAlarmDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l latestDeviceAlarmDo) Distinct(cols ...field.Expr) ILatestDeviceAlarmDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l latestDeviceAlarmDo) Omit(cols ...field.Expr) ILatestDeviceAlarmDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l latestDeviceAlarmDo) Join(table schema.Tabler, on ...field.Expr) ILatestDeviceAlarmDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l latestDeviceAlarmDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILatestDeviceAlarmDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l latestDeviceAlarmDo) RightJoin(table schema.Tabler, on ...field.Expr) ILatestDeviceAlarmDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l latestDeviceAlarmDo) Group(cols ...field.Expr) ILatestDeviceAlarmDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l latestDeviceAlarmDo) Having(conds ...gen.Condition) ILatestDeviceAlarmDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l latestDeviceAlarmDo) Limit(limit int) ILatestDeviceAlarmDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l latestDeviceAlarmDo) Offset(offset int) ILatestDeviceAlarmDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l latestDeviceAlarmDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILatestDeviceAlarmDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l latestDeviceAlarmDo) Unscoped() ILatestDeviceAlarmDo {
	return l.withDO(l.DO.Unscoped())
}

func (l latestDeviceAlarmDo) Create(values ...*model.LatestDeviceAlarm) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l latestDeviceAlarmDo) CreateInBatches(values []*model.LatestDeviceAlarm, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l latestDeviceAlarmDo) Save(values ...*model.LatestDeviceAlarm) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l latestDeviceAlarmDo) First() (*model.LatestDeviceAlarm, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LatestDeviceAlarm), nil
	}
}

func (l latestDeviceAlarmDo) Take() (*model.LatestDeviceAlarm, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LatestDeviceAlarm), nil
	}
}

func (l latestDeviceAlarmDo) Last() (*model.LatestDeviceAlarm, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LatestDeviceAlarm), nil
	}
}

func (l latestDeviceAlarmDo) Find() ([]*model.LatestDeviceAlarm, error) {
	result, err := l.DO.Find()
	return result.([]*model.LatestDeviceAlarm), err
}

func (l latestDeviceAlarmDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LatestDeviceAlarm, err error) {
	buf := make([]*model.LatestDeviceAlarm, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l latestDeviceAlarmDo) FindInBatches(result *[]*model.LatestDeviceAlarm, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l latestDeviceAlarmDo) Attrs(attrs ...field.AssignExpr) ILatestDeviceAlarmDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l latestDeviceAlarmDo) Assign(attrs ...field.AssignExpr) ILatestDeviceAlarmDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l latestDeviceAlarmDo) Joins(fields ...field.RelationField) ILatestDeviceAlarmDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l latestDeviceAlarmDo) Preload(fields ...field.RelationField) ILatestDeviceAlarmDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l latestDeviceAlarmDo) FirstOrInit() (*model.LatestDeviceAlarm, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LatestDeviceAlarm), nil
	}
}

func (l latestDeviceAlarmDo) FirstOrCreate() (*model.LatestDeviceAlarm, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LatestDeviceAlarm), nil
	}
}

func (l latestDeviceAlarmDo) FindByPage(offset int, limit int) (result []*model.LatestDeviceAlarm, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l latestDeviceAlarmDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l latestDeviceAlarmDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l latestDeviceAlarmDo) Delete(models ...*model.LatestDeviceAlarm) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *latestDeviceAlarmDo) withDO(do gen.Dao) *latestDeviceAlarmDo {
	l.DO = *do.(*gen.DO)
	return l
}
