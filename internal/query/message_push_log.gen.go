// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project/internal/model"
)

func newMessagePushLog(db *gorm.DB, opts ...gen.DOOption) messagePushLog {
	_messagePushLog := messagePushLog{}

	_messagePushLog.messagePushLogDo.UseDB(db, opts...)
	_messagePushLog.messagePushLogDo.UseModel(&model.MessagePushLog{})

	tableName := _messagePushLog.messagePushLogDo.TableName()
	_messagePushLog.ALL = field.NewAsterisk(tableName)
	_messagePushLog.ID = field.NewString(tableName, "id")
	_messagePushLog.UserID = field.NewString(tableName, "user_id")
	_messagePushLog.MessageType = field.NewInt64(tableName, "message_type")
	_messagePushLog.Content = field.NewString(tableName, "content")
	_messagePushLog.Status = field.NewInt16(tableName, "status")
	_messagePushLog.ErrMessage = field.NewString(tableName, "err_message")
	_messagePushLog.CreateTime = field.NewTime(tableName, "create_time")

	_messagePushLog.fillFieldMap()

	return _messagePushLog
}

type messagePushLog struct {
	messagePushLogDo

	ALL         field.Asterisk
	ID          field.String
	UserID      field.String // 用户id
	MessageType field.Int64  // 消息类型 1告警消息
	Content     field.String // 消息体内容
	Status      field.Int16  // 1推送成功 2推送失败
	ErrMessage  field.String // 错误信息
	CreateTime  field.Time   // 发送时间

	fieldMap map[string]field.Expr
}

func (m messagePushLog) Table(newTableName string) *messagePushLog {
	m.messagePushLogDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m messagePushLog) As(alias string) *messagePushLog {
	m.messagePushLogDo.DO = *(m.messagePushLogDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *messagePushLog) updateTableName(table string) *messagePushLog {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewString(table, "id")
	m.UserID = field.NewString(table, "user_id")
	m.MessageType = field.NewInt64(table, "message_type")
	m.Content = field.NewString(table, "content")
	m.Status = field.NewInt16(table, "status")
	m.ErrMessage = field.NewString(table, "err_message")
	m.CreateTime = field.NewTime(table, "create_time")

	m.fillFieldMap()

	return m
}

func (m *messagePushLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *messagePushLog) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 7)
	m.fieldMap["id"] = m.ID
	m.fieldMap["user_id"] = m.UserID
	m.fieldMap["message_type"] = m.MessageType
	m.fieldMap["content"] = m.Content
	m.fieldMap["status"] = m.Status
	m.fieldMap["err_message"] = m.ErrMessage
	m.fieldMap["create_time"] = m.CreateTime
}

func (m messagePushLog) clone(db *gorm.DB) messagePushLog {
	m.messagePushLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m messagePushLog) replaceDB(db *gorm.DB) messagePushLog {
	m.messagePushLogDo.ReplaceDB(db)
	return m
}

type messagePushLogDo struct{ gen.DO }

type IMessagePushLogDo interface {
	gen.SubQuery
	Debug() IMessagePushLogDo
	WithContext(ctx context.Context) IMessagePushLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMessagePushLogDo
	WriteDB() IMessagePushLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMessagePushLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMessagePushLogDo
	Not(conds ...gen.Condition) IMessagePushLogDo
	Or(conds ...gen.Condition) IMessagePushLogDo
	Select(conds ...field.Expr) IMessagePushLogDo
	Where(conds ...gen.Condition) IMessagePushLogDo
	Order(conds ...field.Expr) IMessagePushLogDo
	Distinct(cols ...field.Expr) IMessagePushLogDo
	Omit(cols ...field.Expr) IMessagePushLogDo
	Join(table schema.Tabler, on ...field.Expr) IMessagePushLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMessagePushLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMessagePushLogDo
	Group(cols ...field.Expr) IMessagePushLogDo
	Having(conds ...gen.Condition) IMessagePushLogDo
	Limit(limit int) IMessagePushLogDo
	Offset(offset int) IMessagePushLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMessagePushLogDo
	Unscoped() IMessagePushLogDo
	Create(values ...*model.MessagePushLog) error
	CreateInBatches(values []*model.MessagePushLog, batchSize int) error
	Save(values ...*model.MessagePushLog) error
	First() (*model.MessagePushLog, error)
	Take() (*model.MessagePushLog, error)
	Last() (*model.MessagePushLog, error)
	Find() ([]*model.MessagePushLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MessagePushLog, err error)
	FindInBatches(result *[]*model.MessagePushLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MessagePushLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMessagePushLogDo
	Assign(attrs ...field.AssignExpr) IMessagePushLogDo
	Joins(fields ...field.RelationField) IMessagePushLogDo
	Preload(fields ...field.RelationField) IMessagePushLogDo
	FirstOrInit() (*model.MessagePushLog, error)
	FirstOrCreate() (*model.MessagePushLog, error)
	FindByPage(offset int, limit int) (result []*model.MessagePushLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMessagePushLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m messagePushLogDo) Debug() IMessagePushLogDo {
	return m.withDO(m.DO.Debug())
}

func (m messagePushLogDo) WithContext(ctx context.Context) IMessagePushLogDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m messagePushLogDo) ReadDB() IMessagePushLogDo {
	return m.Clauses(dbresolver.Read)
}

func (m messagePushLogDo) WriteDB() IMessagePushLogDo {
	return m.Clauses(dbresolver.Write)
}

func (m messagePushLogDo) Session(config *gorm.Session) IMessagePushLogDo {
	return m.withDO(m.DO.Session(config))
}

func (m messagePushLogDo) Clauses(conds ...clause.Expression) IMessagePushLogDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m messagePushLogDo) Returning(value interface{}, columns ...string) IMessagePushLogDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m messagePushLogDo) Not(conds ...gen.Condition) IMessagePushLogDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m messagePushLogDo) Or(conds ...gen.Condition) IMessagePushLogDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m messagePushLogDo) Select(conds ...field.Expr) IMessagePushLogDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m messagePushLogDo) Where(conds ...gen.Condition) IMessagePushLogDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m messagePushLogDo) Order(conds ...field.Expr) IMessagePushLogDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m messagePushLogDo) Distinct(cols ...field.Expr) IMessagePushLogDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m messagePushLogDo) Omit(cols ...field.Expr) IMessagePushLogDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m messagePushLogDo) Join(table schema.Tabler, on ...field.Expr) IMessagePushLogDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m messagePushLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMessagePushLogDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m messagePushLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IMessagePushLogDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m messagePushLogDo) Group(cols ...field.Expr) IMessagePushLogDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m messagePushLogDo) Having(conds ...gen.Condition) IMessagePushLogDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m messagePushLogDo) Limit(limit int) IMessagePushLogDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m messagePushLogDo) Offset(offset int) IMessagePushLogDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m messagePushLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMessagePushLogDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m messagePushLogDo) Unscoped() IMessagePushLogDo {
	return m.withDO(m.DO.Unscoped())
}

func (m messagePushLogDo) Create(values ...*model.MessagePushLog) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m messagePushLogDo) CreateInBatches(values []*model.MessagePushLog, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m messagePushLogDo) Save(values ...*model.MessagePushLog) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m messagePushLogDo) First() (*model.MessagePushLog, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessagePushLog), nil
	}
}

func (m messagePushLogDo) Take() (*model.MessagePushLog, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessagePushLog), nil
	}
}

func (m messagePushLogDo) Last() (*model.MessagePushLog, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessagePushLog), nil
	}
}

func (m messagePushLogDo) Find() ([]*model.MessagePushLog, error) {
	result, err := m.DO.Find()
	return result.([]*model.MessagePushLog), err
}

func (m messagePushLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MessagePushLog, err error) {
	buf := make([]*model.MessagePushLog, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m messagePushLogDo) FindInBatches(result *[]*model.MessagePushLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m messagePushLogDo) Attrs(attrs ...field.AssignExpr) IMessagePushLogDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m messagePushLogDo) Assign(attrs ...field.AssignExpr) IMessagePushLogDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m messagePushLogDo) Joins(fields ...field.RelationField) IMessagePushLogDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m messagePushLogDo) Preload(fields ...field.RelationField) IMessagePushLogDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m messagePushLogDo) FirstOrInit() (*model.MessagePushLog, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessagePushLog), nil
	}
}

func (m messagePushLogDo) FirstOrCreate() (*model.MessagePushLog, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessagePushLog), nil
	}
}

func (m messagePushLogDo) FindByPage(offset int, limit int) (result []*model.MessagePushLog, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m messagePushLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m messagePushLogDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m messagePushLogDo) Delete(models ...*model.MessagePushLog) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *messagePushLogDo) withDO(do gen.Dao) *messagePushLogDo {
	m.DO = *do.(*gen.DO)
	return m
}
