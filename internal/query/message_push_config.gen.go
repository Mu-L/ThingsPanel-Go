// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project/internal/model"
)

func newMessagePushConfig(db *gorm.DB, opts ...gen.DOOption) messagePushConfig {
	_messagePushConfig := messagePushConfig{}

	_messagePushConfig.messagePushConfigDo.UseDB(db, opts...)
	_messagePushConfig.messagePushConfigDo.UseModel(&model.MessagePushConfig{})

	tableName := _messagePushConfig.messagePushConfigDo.TableName()
	_messagePushConfig.ALL = field.NewAsterisk(tableName)
	_messagePushConfig.ID = field.NewString(tableName, "id")
	_messagePushConfig.URL = field.NewString(tableName, "url")
	_messagePushConfig.ConfigType = field.NewInt16(tableName, "config_type")
	_messagePushConfig.CreateTime = field.NewTime(tableName, "create_time")
	_messagePushConfig.UpdateTime = field.NewTime(tableName, "update_time")

	_messagePushConfig.fillFieldMap()

	return _messagePushConfig
}

type messagePushConfig struct {
	messagePushConfigDo

	ALL        field.Asterisk
	ID         field.String
	URL        field.String // 推送地址
	ConfigType field.Int16  // 配置类型 1 推送地址
	CreateTime field.Time   // 创建时间
	UpdateTime field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (m messagePushConfig) Table(newTableName string) *messagePushConfig {
	m.messagePushConfigDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m messagePushConfig) As(alias string) *messagePushConfig {
	m.messagePushConfigDo.DO = *(m.messagePushConfigDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *messagePushConfig) updateTableName(table string) *messagePushConfig {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewString(table, "id")
	m.URL = field.NewString(table, "url")
	m.ConfigType = field.NewInt16(table, "config_type")
	m.CreateTime = field.NewTime(table, "create_time")
	m.UpdateTime = field.NewTime(table, "update_time")

	m.fillFieldMap()

	return m
}

func (m *messagePushConfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *messagePushConfig) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 5)
	m.fieldMap["id"] = m.ID
	m.fieldMap["url"] = m.URL
	m.fieldMap["config_type"] = m.ConfigType
	m.fieldMap["create_time"] = m.CreateTime
	m.fieldMap["update_time"] = m.UpdateTime
}

func (m messagePushConfig) clone(db *gorm.DB) messagePushConfig {
	m.messagePushConfigDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m messagePushConfig) replaceDB(db *gorm.DB) messagePushConfig {
	m.messagePushConfigDo.ReplaceDB(db)
	return m
}

type messagePushConfigDo struct{ gen.DO }

type IMessagePushConfigDo interface {
	gen.SubQuery
	Debug() IMessagePushConfigDo
	WithContext(ctx context.Context) IMessagePushConfigDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMessagePushConfigDo
	WriteDB() IMessagePushConfigDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMessagePushConfigDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMessagePushConfigDo
	Not(conds ...gen.Condition) IMessagePushConfigDo
	Or(conds ...gen.Condition) IMessagePushConfigDo
	Select(conds ...field.Expr) IMessagePushConfigDo
	Where(conds ...gen.Condition) IMessagePushConfigDo
	Order(conds ...field.Expr) IMessagePushConfigDo
	Distinct(cols ...field.Expr) IMessagePushConfigDo
	Omit(cols ...field.Expr) IMessagePushConfigDo
	Join(table schema.Tabler, on ...field.Expr) IMessagePushConfigDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMessagePushConfigDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMessagePushConfigDo
	Group(cols ...field.Expr) IMessagePushConfigDo
	Having(conds ...gen.Condition) IMessagePushConfigDo
	Limit(limit int) IMessagePushConfigDo
	Offset(offset int) IMessagePushConfigDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMessagePushConfigDo
	Unscoped() IMessagePushConfigDo
	Create(values ...*model.MessagePushConfig) error
	CreateInBatches(values []*model.MessagePushConfig, batchSize int) error
	Save(values ...*model.MessagePushConfig) error
	First() (*model.MessagePushConfig, error)
	Take() (*model.MessagePushConfig, error)
	Last() (*model.MessagePushConfig, error)
	Find() ([]*model.MessagePushConfig, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MessagePushConfig, err error)
	FindInBatches(result *[]*model.MessagePushConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MessagePushConfig) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMessagePushConfigDo
	Assign(attrs ...field.AssignExpr) IMessagePushConfigDo
	Joins(fields ...field.RelationField) IMessagePushConfigDo
	Preload(fields ...field.RelationField) IMessagePushConfigDo
	FirstOrInit() (*model.MessagePushConfig, error)
	FirstOrCreate() (*model.MessagePushConfig, error)
	FindByPage(offset int, limit int) (result []*model.MessagePushConfig, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMessagePushConfigDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m messagePushConfigDo) Debug() IMessagePushConfigDo {
	return m.withDO(m.DO.Debug())
}

func (m messagePushConfigDo) WithContext(ctx context.Context) IMessagePushConfigDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m messagePushConfigDo) ReadDB() IMessagePushConfigDo {
	return m.Clauses(dbresolver.Read)
}

func (m messagePushConfigDo) WriteDB() IMessagePushConfigDo {
	return m.Clauses(dbresolver.Write)
}

func (m messagePushConfigDo) Session(config *gorm.Session) IMessagePushConfigDo {
	return m.withDO(m.DO.Session(config))
}

func (m messagePushConfigDo) Clauses(conds ...clause.Expression) IMessagePushConfigDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m messagePushConfigDo) Returning(value interface{}, columns ...string) IMessagePushConfigDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m messagePushConfigDo) Not(conds ...gen.Condition) IMessagePushConfigDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m messagePushConfigDo) Or(conds ...gen.Condition) IMessagePushConfigDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m messagePushConfigDo) Select(conds ...field.Expr) IMessagePushConfigDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m messagePushConfigDo) Where(conds ...gen.Condition) IMessagePushConfigDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m messagePushConfigDo) Order(conds ...field.Expr) IMessagePushConfigDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m messagePushConfigDo) Distinct(cols ...field.Expr) IMessagePushConfigDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m messagePushConfigDo) Omit(cols ...field.Expr) IMessagePushConfigDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m messagePushConfigDo) Join(table schema.Tabler, on ...field.Expr) IMessagePushConfigDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m messagePushConfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMessagePushConfigDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m messagePushConfigDo) RightJoin(table schema.Tabler, on ...field.Expr) IMessagePushConfigDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m messagePushConfigDo) Group(cols ...field.Expr) IMessagePushConfigDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m messagePushConfigDo) Having(conds ...gen.Condition) IMessagePushConfigDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m messagePushConfigDo) Limit(limit int) IMessagePushConfigDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m messagePushConfigDo) Offset(offset int) IMessagePushConfigDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m messagePushConfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMessagePushConfigDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m messagePushConfigDo) Unscoped() IMessagePushConfigDo {
	return m.withDO(m.DO.Unscoped())
}

func (m messagePushConfigDo) Create(values ...*model.MessagePushConfig) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m messagePushConfigDo) CreateInBatches(values []*model.MessagePushConfig, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m messagePushConfigDo) Save(values ...*model.MessagePushConfig) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m messagePushConfigDo) First() (*model.MessagePushConfig, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessagePushConfig), nil
	}
}

func (m messagePushConfigDo) Take() (*model.MessagePushConfig, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessagePushConfig), nil
	}
}

func (m messagePushConfigDo) Last() (*model.MessagePushConfig, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessagePushConfig), nil
	}
}

func (m messagePushConfigDo) Find() ([]*model.MessagePushConfig, error) {
	result, err := m.DO.Find()
	return result.([]*model.MessagePushConfig), err
}

func (m messagePushConfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MessagePushConfig, err error) {
	buf := make([]*model.MessagePushConfig, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m messagePushConfigDo) FindInBatches(result *[]*model.MessagePushConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m messagePushConfigDo) Attrs(attrs ...field.AssignExpr) IMessagePushConfigDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m messagePushConfigDo) Assign(attrs ...field.AssignExpr) IMessagePushConfigDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m messagePushConfigDo) Joins(fields ...field.RelationField) IMessagePushConfigDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m messagePushConfigDo) Preload(fields ...field.RelationField) IMessagePushConfigDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m messagePushConfigDo) FirstOrInit() (*model.MessagePushConfig, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessagePushConfig), nil
	}
}

func (m messagePushConfigDo) FirstOrCreate() (*model.MessagePushConfig, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessagePushConfig), nil
	}
}

func (m messagePushConfigDo) FindByPage(offset int, limit int) (result []*model.MessagePushConfig, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m messagePushConfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m messagePushConfigDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m messagePushConfigDo) Delete(models ...*model.MessagePushConfig) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *messagePushConfigDo) withDO(do gen.Dao) *messagePushConfigDo {
	m.DO = *do.(*gen.DO)
	return m
}
